"use strict";angular.module("app",["app.routes","app.components","app.services","app.auth","app.shared"]),angular.module("app.routes",["ngComponentRouter"]),angular.module("app.components",["ngMessages"]),angular.module("app.services",[]),angular.module("app.shared",["ngSessionStorage"]),angular.module("app.routes").config(["$locationProvider",function($locationProvider){window.history&&window.history.pushState&&$locationProvider.html5Mode(!0)}]).value("$routerRootComponent","app"),function(){angular.module("app.auth",[]).factory("authService",["$http","sessionService",function($http,sessionService){return{login:function(data){return $http.post("/api/auth",data).then(function(response){return!!response.data.auth&&(sessionService.set("userRole",response.data.role),response.data.auth)})},logout:function(){return $http.delete("/api/auth").then(function(response){return!!response.data.logout&&(sessionService.remove("userRole"),response.data.logout)})},isLogged:function(){return $http.get("/api/auth").then(function(response){return!!response.data.session&&(sessionService.set("userRole",response.data.role),response.data.session)})}}}])}(),function(){angular.module("app.auth",[]).factory("authService",["$http","sessionService",function($http,sessionService){return{login:function(data){return $http.post("/api/auth",data).then(function(response){return!!response.data.auth&&(sessionService.set("userRole",response.data.role),response.data.auth)})},logout:function(){return $http.delete("/api/auth").then(function(response){return!!response.data.logout&&(sessionService.remove("userRole"),response.data.logout)})},isLogged:function(){return $http.get("/api/auth").then(function(response){return!!response.data.session&&(sessionService.set("userRole",response.data.role),response.data.session)})}}}])}(),function(){angular.module("app.shared").directive("backImg",function(){return{restrict:"A",link:function($scope,element,$attrs){$attrs.$observe("backImg",function(url){element.css({"background-image":"url("+url+")"})})}}})}(),function(){function Ctrl(){var _this=this;this.fn=null,this.show=!1,this.open=function(fn){_this.fn=fn,_this.show=!0},this.confirm=function(){if(!_this.fn)throw{name:"confirm component",message:"fn() not found"};if("function"!=typeof _this.fn)throw{name:"confirm component",message:"fn() not function"};_this.fn(),_this.show=!1},this.cancel=function(){_this.fn=null,_this.show=!1},this.$onInit=function(){_this.callback=_this.open}}angular.module("app.shared").component("confirm",{template:'<div ng-class="$ctrl.show ? \'open\':\'\'" class="popup">\n                        <div class="popup-content">\n                            <p class="popup-title">Are you sure?</p>\n                            <button ng-click="$ctrl.confirm()" class="btn btn--success">Yes</button>\n                            <button ng-click="$ctrl.cancel()" class="btn btn--warning">No</button>\n                        </div>\n                   </div>',bindings:{callback:"="},controller:Ctrl})}(),function(){function Ctrl($element,$scope){var _this=this,elem=angular.element($element[0].querySelector('[type="file"]'));this.fileName=null,Array.isArray(this.mimeTypes)||(this.mimeTypes=[this.mimeTypes]),this.remove=function(){elem[0].value="",this.fileName=null,this.ngModel.$setViewValue(null),this.fileReadCb()},elem.on("change",function(event){_this.ngModel.$setDirty(),_this.ngModel.$setTouched();var isValidMimeType=null,file=event.target.files[0];file?(isValidMimeType=_this.mimeTypes.some(function(type){return type===file.type}),isValidMimeType?_this.ngModel.$setValidity("mimeTypes",!0):(file=null,_this.ngModel.$setValidity("mimeTypes",!1))):_this.ngModel.$setValidity("mimeTypes",!0),_this.fileName=file?file.name:null,_this.ngModel.$setViewValue(file),_this.fileReadCb()})}Ctrl.$inject=["$element","$scope"],angular.module("app.shared").component("fileRead",{template:'<p>\n                        <span>File : </span> \n                        <a class="file-read_remove" ng-if="$ctrl.fileName" ng-click="$ctrl.remove()" ng-href="#"><i class="icon fa fa-times"></i> </a> \n                        {{$ctrl.fileName}}\n                   </p>\n                   <input type="file">\n                   <div class="ng-transclude"></div>',require:{ngModel:"ngModel"},transclude:!0,bindings:{fileReadCb:"<",mimeTypes:"<"},controller:Ctrl})}(),function(){angular.module("app.shared").factory("sessionService",["$sessionStorage",function($sessionStorage){return{get:function(key){return $sessionStorage.get(key)},set:function(key,value){return $sessionStorage.put(key,value)},remove:function(key){return $sessionStorage.remove(key)}}}])}(),function(){angular.module("app.components").component("app",{template:"<ng-outlet></ng-outlet>",$routeConfig:[{path:"/...",name:"AppPages",component:"appPages"},{path:"/login",name:"Login",component:"login",useAsDefault:!0}]})}(),function(){function Ctrl($rootRouter,authService){this.logout=function(){authService.logout().then(function(){$rootRouter.navigate(["Login"])})},authService.isLogged().then(function(result){result||$rootRouter.navigate(["Login"])})}function canActivate($rootRouter,authService){return authService.isLogged().then(function(result){return!!result||($rootRouter.navigate(["Login"]),!1)})}Ctrl.$inject=["$rootRouter","authService"],angular.module("app.components").component("appPages",{templateUrl:"app-pages.html",$canActivate:canActivate,controller:Ctrl,$routeConfig:[{path:"/home",name:"Home",component:"home"},{path:"/posts/...",name:"Posts",component:"posts",useAsDefault:!0},{path:"/",redirectTo:["/Login"]},{path:"/**",name:"NotFound",component:"notFound"},{path:"/404",name:"NotFound",component:"notFound"}]})}(),function(){function Ctrl(authService,$rootRouter){this.credentials={name:"",password:""},this.submited=!1,this.error={status:!1,message:""},this.login=function(data){var _this=this;return!this.submited&&(this.submited=!0,void authService.login(data).then(function(result){result&&$rootRouter.navigate(["AppPages"])},function(err){_this.error.status=!0,401==err.status&&(_this.error.message="Username or password is incorrect"),_this.submited=!1}))}}function canActivate(authService,$rootRouter){return authService.isLogged().then(function(result){return!result||($rootRouter.navigate(["AppPages"]),!1)})}Ctrl.$inject=["authService","$rootRouter"],angular.module("app.components").component("login",{templateUrl:"login.html",controller:Ctrl,$canActivate:canActivate})}(),function(){angular.module("app.components").component("notFound",{templateUrl:"not-found.html"})}(),function(){function Ctrl(postsService,sessionService,$rootRouter,$scope){var _this=this;this.behavior=null,this.id=null,this.post=null,this.currentPage=null,this.file=null,this.prewFile=null,this.userRole=sessionService.get("userRole"),this.showPrewImg=function(){if(this.file){var reader=new FileReader;reader.onload=function(e){this.prewFile=e.target.result,$scope.$apply()}.bind(this),reader.readAsDataURL(this.file)}else this.prewFile=null}.bind(this),this.goToBack=function(){_this.$router.navigate(["PostsList",{page:_this.currentPage}])},this.postCreate=function(){var data={heading:_this.post.heading,text:_this.post.text,file:_this.file};postsService.create(data).then(function(data){_this.$router.navigate(["PostsList",{page:1}])},function(err){console.log(err)})},this.postUpdate=function(){var data={heading:_this.post.heading,text:_this.post.text,file:_this.file};postsService.put(_this.id,data).then(function(data){_this.$router.navigate(["PostsList",{page:_this.currentPage}])})},this.$routerOnActivate=function(next,prev){window.scrollTo(0,0),next.params.page?_this.currentPage=next.params.page:_this.currentPage=prev?prev.params.page:1,_this.post=next.routeData.postItem,_this.id=next.params.id,_this.behavior=next.routeData.data.behavior?next.routeData.data.behavior:null}}function canActivate($rootRouter,$nextInstruction,sessionService,postsService){var userRole=sessionService.get("userRole"),behavior=$nextInstruction.routeData.data.behavior,id=$nextInstruction.params.id;return behavior&&userRole>1?($rootRouter.navigateByUrl("404",!0),!1):"create"==behavior||postsService.get(id).then(function(res){$nextInstruction.routeData.postItem=res},function(err){return 401==err.status?($rootRouter.navigate(["Login"]),!1):404==err.status?($rootRouter.navigateByUrl("404",!0),!1):void 0})}Ctrl.$inject=["postsService","sessionService","$rootRouter","$scope"],angular.module("app.components").component("postItem",{templateUrl:"post-item.html",controller:Ctrl,$canActivate:canActivate,bindings:{$router:"<"}})}(),function(){angular.module("app.components").component("posts",{templateUrl:"posts.html",bindings:{$router:"<"},$routeConfig:[{path:"/:page",name:"PostsList",component:"postsList"},{path:"/:page/:id",name:"PostDetail",component:"postItem"},{path:"/create",name:"PostCreate",data:{behavior:"create"},component:"postItem"},{path:"/:page/edit/:id",name:"PostEdit",data:{behavior:"edit"},component:"postItem"},{path:"/",redirectTo:["PostsList",{page:1}]}]})}(),function(){function dataPrep(data){var fd=new FormData;for(var key in data)fd.append(key,data[key]);return fd}angular.module("app.services").factory("postsService",["$http",function($http){return{get:function(id){return $http.get("api/posts/"+id).then(function(response){return response.data})},put:function(id,data){return $http.put("api/posts/"+id,dataPrep(data),{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(response){return response})},remove:function(id){return $http.delete("api/posts/"+id).then(function(response){return response})},create:function(data){return $http.post("api/posts",dataPrep(data),{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(function(response){return response})},getList:function(){var page=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,limit=arguments.length>1&&void 0!==arguments[1]?arguments[1]:9;return $http.get("api/posts?limit="+limit+"&page="+page).then(function(response){return response.data})}}}])}(),function(){function Ctrl(postsService,sessionService){var _this2=this;this.paginationLimit=5,this.pagination=[],this.limit=9,this.posts=null,this.currentPage=null,this.postsSum=null,this.userRole=sessionService.get("userRole")||2,this.confirm=null,this.makePagination=function(currentPage,maxSize,pagesSum){function createArr(min,max){for(var arr=[],i=min;i<min+max;i++)arr.push(i);return arr}var magicNumber=void 0;if(!maxSize||!currentPage)throw{message:"pagination wrong data"};return magicNumber=Math.ceil(maxSize/2),maxSize=pagesSum<maxSize?pagesSum:maxSize,currentPage<magicNumber?createArr(1,maxSize):currentPage>pagesSum-magicNumber?createArr(pagesSum-maxSize+1,maxSize):currentPage>=magicNumber&&currentPage<=pagesSum-magicNumber?createArr(currentPage-Math.floor(maxSize/2),maxSize):void 0},this.remove=function(id,index){return function(){var _this=this;return postsService.remove(id).then(function(data){data?(_this.posts.splice(index,1),0==_this.posts.length&&_this.$router.navigate(["PostsList",{page:_this.currentPage-1}])):console.log("remove error")})}.bind(this)},this.goToPage=function(id){_this2.$router.navigate(["PostsList",{page:id}])},this.$routerOnActivate=function(next){return window.scrollTo(0,0),_this2.currentPage=next.params.page||1,_this2.posts=next.routeData.myData.posts,_this2.postsSum=Math.ceil(next.routeData.myData.postsSum/_this2.limit),_this2.pagination=_this2.makePagination(_this2.currentPage,_this2.paginationLimit,_this2.postsSum),!0}}function canActivate($nextInstruction,postsService,$rootRouter){return postsService.getList($nextInstruction.params.page-1).then(function(res){return $nextInstruction.routeData.myData={posts:res.posts,postsSum:res.postsSum},!0},function(err){return 404==err.status?($rootRouter.navigateByUrl("404",!0),!1):401==err.status?($rootRouter.navigate(["Login"]),!1):void 0})}Ctrl.$inject=["postsService","sessionService"],angular.module("app.components").component("postsList",{templateUrl:"posts-list.html",bindings:{$router:"<",confirm:"<"},controller:Ctrl,$canActivate:canActivate})}();